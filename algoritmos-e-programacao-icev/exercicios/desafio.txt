/*
@Pedro Santana Abreu (https://linktr.ee/pedrosantanaabreu)
@Icev (https://somosicev.com)

PT-BR:
Faça um programa que simule um controle bancário. Para tanto, devem ser
lidos os códigos de dez contas e seus respectivos saldos. Os códigos devem
ser armazenados em um vetor de dez número inteiros (não pode haver mais de
uma conta com o mesmo código) e os saldos devem ser armazenados em um
vetor de números reais. O saldo deverá ser cadastrado na mesma posição do
código. Por exemplo, se a conta 504 foi armazenada na quinta posição do vetor
de códigos, seu saldo deverá ficar na quinta posição do vetor de saldos. Depois
de fazer a leitura dos valores, deverá aparecer o seguinte menu na tela:
Menu Principal

1. Efetuar depósito
2. Efetuar saque
3. Consultar ativo bancário
4. Relatório de contas
5. Finalizar o programa

• Para efetuar depósito, deve-se solicitar o código da conta e o valor a ser
depositado. Se a conta não estiver cadastrada, deverá ser exibida uma
mensagem correspondente e voltar ao menu. Se a conta existir, o saldo
deve ser atualizado

• Para efetuar saque, deve-se solicitar o código da conta e valor a ser
sacado. Se a conta não estiver cadastrada, deverá ser exibida uma
mensagem ao usuário e voltar ao menu. Se a conta existir, o programa deve
verificar se o saldo é suficiente para o valor do saque. Se o saldo for
suficiente, realizar o saque, atualizar o saldo e voltar ao menu. Caso
contrário, mostrar uma mensagem de saldo insuficiente e voltar ao menu

• Para consultar o ativo bancário, deve-se somar o saldo de todas as contas
do banco. Depois de mostrar esse valor, voltar ao menu

• O relatório de contas deve listar o código das contas e os respectivos
saldos

• O programa só termina quanto for digitada a opção 5.
*/

programa
{
	inclua biblioteca Tipos
	inclua biblioteca Matematica
	inclua biblioteca Util
	
	funcao inicio()
	{
		// Área de variáveis
		inteiro codigos[10]
		real saldos[10]
		inteiro quantidadeContas = 2
		inteiro opcaoMenu = 0

		// Registrando contas
		registrarConta(codigos, saldos, quantidadeContas)

		// Exbindo menu de opções e recebendo opção
		exibirMenu()
		opcaoMenu = validarOpcao(obterOpcao())

		// Chamando funções
		chamarFuncaoMenu(opcaoMenu, codigos, saldos, quantidadeContas)
	}

	// Menu
	funcao exibirMenu()
	{
		limpa()
		escreva("[ / ] Menu principal", "\n",
		"[ 1 ] Efetuar depósito", "\n",
		"[ 2 ] Efetuar saque", "\n",
		"[ 3 ] Consultar ativo bancário", "\n",
		"[ 4 ] Relatório de contas","\n",
		"[ 5 ] Finalizar o programa", "\n",
		"[ > ] ")
	}
	
	// Funções relacionada ao menu
	funcao chamarFuncaoMenu(inteiro opcao, inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		enquanto (verdadeiro)
		{
			// Depositar
			se (opcao == 1)
			{
				enquanto (verdadeiro)
				{
					limpa()
					inteiro codigo = validarCodigo(obterCodigo())
		
					se (conferirCodigoExistente(codigo, codigos, quantidadeContas))
					{
						real valorDeposito = validarValorDeposito(obterValorDeposito())
						inteiro indexConta = encontrarIndex(codigo, codigos)
			
						// Depositando
						depositar(saldos, valorDeposito, indexConta)
			
						// Exibindo resultado
						real saldoAntigo = saldos[indexConta] - valorDeposito
						real valorResultante = saldos[indexConta]
				
						saldoAntigo = Matematica.arredondar(saldoAntigo, 2)
						valorDeposito = Matematica.arredondar(valorDeposito, 2)
						valorResultante = Matematica.arredondar(valorResultante, 2)
			
						limpa()
						escreva("[ / ] Depósito concluído com sucesso", "\n",
						"[ $ ] R$ ", saldoAntigo, "\n",
						"[ + ] R$ ", valorDeposito, "\n",
						"[ = ] R$ ", valorResultante, "\n",
						"\n")
			
						mensagemContinuar()

						pare
					}
					senao
					{
						mensagemCarregamento(2, "Conta não cadastrada")	
					}	
				}
			}

			// Saque
			senao se (opcao == 2)
			{
				enquanto (verdadeiro)
				{
					limpa()
					inteiro codigo = validarCodigo(obterCodigo())
	
					se (conferirCodigoExistente(codigo, codigos, quantidadeContas))
					{
						inteiro indexConta = encontrarIndex(codigo, codigos)
			
						real saldo = saldos[indexConta]
						real valorSaque = validarValorSaque(obterValorSaque(), saldo)
			
						// Sacando
						sacar(saldos, valorSaque, indexConta)
			
						// Escrevendo resultado
						real saldoAntigo = saldos[indexConta] + valorSaque
						real valorResultante = saldos[indexConta]
				
						saldoAntigo = Matematica.arredondar(saldoAntigo, 2)
						valorSaque = Matematica.arredondar(valorSaque, 2)
						valorResultante = Matematica.arredondar(valorResultante, 2)
						
						limpa()
						escreva("[ / ] Saque concluído com sucesso", "\n",
						"[ $ ] R$ ", saldoAntigo, "\n",
						"[ - ] R$ ", valorSaque, "\n",
						"[ = ] R$ ", valorResultante, "\n",
						"\n")
			
						mensagemContinuar()

						pare
					}
					senao
					{
						mensagemCarregamento(2, "Conta não cadastrada")
					}
				}
			}

			// Consultar ativo bancário
			senao se (opcao == 3)
			{
				// Consultando
				real ativoBancario = consultarAtivoBancario(saldos, quantidadeContas)
	
				// Exibindo resultado
				ativoBancario = Matematica.arredondar(ativoBancario, 2)
	
				limpa()
				escreva("[ / ] Ativo bancário", "\n",
				"[ $ ] R$ ", ativoBancario, "\n",
				"\n")
	
				mensagemContinuar()
			}

			// Relatório de contas
			senao se (opcao == 4)
			{
				// Exibindo resultado
				limpa()
				relatorioContas(codigos, saldos, quantidadeContas)
				mensagemContinuar()
			}
			senao se (opcao == 5)
			{
				mensagemCarregamento(2, "Saindo")
				pare
			}
			senao
			{
				limpa()
				escreva("[ ! ] Opção inválida")
			}

			exibirMenu()
			opcao = validarOpcao(obterOpcao())
		}
	}

	funcao depositar(real &saldos[], real valorDeposito, inteiro index)
	{
		saldos[index] += valorDeposito
	}

	funcao sacar(real &saldos[], real valorSaque, inteiro index)
	{
		saldos[index] -= valorSaque
	}

	funcao real consultarAtivoBancario(real &saldos[], inteiro &quantidadeContas)
	{
		real somaAtivoBancario = 0.0

		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			somaAtivoBancario += saldos[i]
		}

		retorne somaAtivoBancario
	}

	funcao relatorioContas(inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			escreva("[ / ] ", i + 1, "ª conta", "\n",
			"[ # ] Código | ", codigos[i], "\n",
			"[ $ ] Saldo | R$ ", Matematica.arredondar(saldos[i], 2), "\n",
			"\n")
		}
	}

	// Funções para criação de conta
	funcao registrarConta(inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		inteiro codigo = 0
		real saldo = 0.0

		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			enquanto (verdadeiro)
			{
				limpa()
				escreva("[ / ] Criação de conta", "\n")
				codigo = validarCodigo(obterCodigo())

				se (conferirCodigoExistente(codigo, codigos, quantidadeContas))
				{
					mensagemCarregamento(2, "Código já registrado")	
				}
				senao
				{
					limpa()
					escreva("[ / ] Criação de conta", "\n")
					saldo = validarSaldo(obterSaldo())

					// Confirmação
					se (confirmarRegistrarConta(codigo, saldo, i))
					{
						codigos[i] = codigo
						saldos[i] = saldo
						pare
					}
				}
			}
		}
	}

	funcao logico confirmarRegistrarConta(inteiro codigo, real saldo, inteiro numeroConta)
	{
		cadeia confirmacao = ""
		logico confirmacaoConta = falso

		enquanto (verdadeiro)
		{
			limpa()
			escreva("[ / ] ", numeroConta + 1, "ª conta", "\n",
			"[ # ] Código | ", codigo, "\n",
			"[ $ ] Saldo | R$ ", saldo, "\n",
			"\n",
			"[ 1 ] Confirmar", "\n",
			"[ 2 ] Cancelar", "\n",
			"[ > ] ")
			leia(confirmacao)

			se (confirmacao == "1")
			{
				confirmacaoConta = verdadeiro
				pare
			}
			senao se (confirmacao == "2")
			{
				pare
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente")
			}
		}

		retorne confirmacaoConta
	}

	// Funcionalidades extras
	funcao inteiro encontrarIndex(inteiro codigo, inteiro &codigos[])
	{
		inteiro tamanhoVetor = 10
		inteiro index = 0

		para (inteiro i = 0; i < tamanhoVetor; i++)
		{
			se (codigos[i] == codigo)
			{
				index = i
				pare
			}
		}

		retorne index
	}

	funcao logico conferirCodigoExistente(inteiro codigo, inteiro &codigos[], inteiro &quantidadeContas)
	{
		logico validado = falso

		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			se (codigos[i] == codigo)
			{
				validado = verdadeiro
				pare
			}
		}

		retorne validado
	}

	// Obter valores
	funcao cadeia obterOpcao()
	{
		cadeia opcao

		leia(opcao)

		retorne opcao
	}

	funcao cadeia obterSaldo()
	{
		cadeia saldo = ""

		escreva("[ ? ] Informe o valor", "\n",
		"[ $ ] R$ ")
		leia(saldo)
		
		retorne saldo
	}

	funcao cadeia obterCodigo()
	{
		cadeia codigo = ""

		escreva("[ ? ] Informe o código da conta", "\n",
		"[ # ] ")
		leia(codigo)
		
		retorne codigo
	}

	funcao cadeia obterValorDeposito()
	{
		cadeia valorDepostio = ""

		limpa()
		escreva("[ / ] Depósito", "\n",
		"[ ? ] Informe o valor do depósito", "\n",
		"[ $ ] R$ ")
		leia(valorDepostio)
		
		retorne valorDepostio
	}

	funcao cadeia obterValorSaque()
	{
		cadeia valorSaque = ""

		limpa()
		escreva("[ / ] Saque", "\n",
		"[ ? ] Informe o valor do saque", "\n",
		"[ $ ] R$ ")
		leia(valorSaque)
		
		retorne valorSaque
	}

	// Validações
	funcao real validarSaldo(cadeia saldo)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(saldo, 10) ou Tipos.cadeia_e_real(saldo))
			{
				pare
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				saldo = obterCodigo()
			}
		}

		retorne Tipos.cadeia_para_real(saldo)
	}

	funcao inteiro validarCodigo(cadeia codigo)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(codigo, 10))
			{
				pare
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				codigo = obterCodigo()
			}
		}

		retorne Tipos.cadeia_para_inteiro(codigo, 10)
	}

	funcao inteiro validarOpcao(cadeia opcao)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(opcao, 10))
			{
				se (Tipos.cadeia_para_inteiro(opcao, 10) >= 1 e Tipos.cadeia_para_inteiro(opcao, 10) <= 5)
				{
					 pare
				}
				senao
				{
					mensagemCarregamento(2, "Opção inválida, tente novamente.")
					exibirMenu()
					opcao = obterOpcao()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				exibirMenu()
				opcao = obterOpcao()
			}
		}

		retorne Tipos.cadeia_para_inteiro(opcao, 10)
	}

	funcao real validarValorDeposito(cadeia valorDeposito)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(valorDeposito, 10) ou Tipos.cadeia_e_real(valorDeposito))
			{
				se (Tipos.cadeia_para_real(valorDeposito) > 0.0)
				{
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor deve ser maior que R$ 0, tente novamente.")
					valorDeposito = obterValorDeposito()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				valorDeposito = obterValorDeposito()
			}
		}

		retorne Tipos.cadeia_para_real(valorDeposito)
	}

	funcao real validarValorSaque(cadeia valorSaque, real saldo)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(valorSaque, 10) ou Tipos.cadeia_e_real(valorSaque))
			{
				se (Tipos.cadeia_para_real(valorSaque) > 0.0)
				{
					se (saldo >= Tipos.cadeia_para_real(valorSaque))
					{
						pare
					}
					senao
					{
						mensagemCarregamento(2, "Valor de saque maior que saldo, tente novamente.")
						valorSaque = obterValorSaque()
					}
				}
				senao
				{
					mensagemCarregamento(2, "Valor deve ser maior que R$ 0, tente novamente.")
					valorSaque = obterValorSaque()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				valorSaque = obterValorSaque()
			}
		}

		retorne Tipos.cadeia_para_real(valorSaque)	
	}

	// Funções estéticas
	funcao mensagemCarregamento(inteiro ciclos, cadeia mensagem)
	{
		cadeia simboloCarregamento[4]
		simboloCarregamento[0] = "|"
		simboloCarregamento[1] = "\\"
		simboloCarregamento[2] = "-"
		simboloCarregamento[3] = "/"

		para (inteiro i = 1; i <= ciclos; i++)
		{
			para (inteiro j = 0; j <= 3; j++)
			{
				limpa()
				escreva("[ ", simboloCarregamento[j]," ] ", mensagem)
				Util.aguarde(100)			
			}
		}

		limpa()
	}

	funcao mensagemContinuar()
	{
		cadeia continuar = ""
		escreva("[ Enter ] Para continuar\n")
		leia(continuar)
	}
}
