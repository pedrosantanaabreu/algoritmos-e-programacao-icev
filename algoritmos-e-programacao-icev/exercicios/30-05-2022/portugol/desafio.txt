/*
@Pedro Santana Abreu (https://linktr.ee/pedrosantanaabreu)
@Icev (https://somosicev.com)

PT-BR:
Faça um programa que simule um controle bancário. Para tanto, devem ser
lidos os códigos de dez contas e seus respectivos saldos. Os códigos devem
ser armazenados em um vetor de dez número inteiros (não pode haver mais de
uma conta com o mesmo código) e os saldos devem ser armazenados em um
vetor de números reais. O saldo deverá ser cadastrado na mesma posição do
código. Por exemplo, se a conta 504 foi armazenada na quinta posição do vetor
de códigos, seu saldo deverá ficar na quinta posição do vetor de saldos. Depois
de fazer a leitura dos valores, deverá aparecer o seguinte menu na tela:
Menu Principal

1. Efetuar depósito
2. Efetuar saque
3. Consultar ativo bancário
4. Relatório de contas
5. Finalizar o programa

• Para efetuar depósito, deve-se solicitar o código da conta e o valor a ser
depositado. Se a conta não estiver cadastrada, deverá ser exibida uma
mensagem correspondente e voltar ao menu. Se a conta existir, o saldo
deve ser atualizado

• Para efetuar saque, deve-se solicitar o código da conta e valor a ser
sacado. Se a conta não estiver cadastrada, deverá ser exibida uma
mensagem ao usuário e voltar ao menu. Se a conta existir, o programa deve
verificar se o saldo é suficiente para o valor do saque. Se o saldo for
suficiente, realizar o saque, atualizar o saldo e voltar ao menu. Caso
contrário, mostrar uma mensagem de saldo insuficiente e voltar ao menu

• Para consultar o ativo bancário, deve-se somar o saldo de todas as contas
do banco. Depois de mostrar esse valor, voltar ao menu

• O relatório de contas deve listar o código das contas e os respectivos
saldos

• O programa só termina quanto for digitada a opção 5.
*/

programa
{
	inclua biblioteca Tipos
	inclua biblioteca Matematica
	inclua biblioteca Util

	// Inicio
	funcao inicio()
	{
		// Área de variáveis
		inteiro opcaoMenu = 0
		inteiro quantidadeContas = 10
		inteiro codigos[10]
		real saldos[10]

		// Registrando contas
		registrarConta(codigos, saldos, quantidadeContas)

		// Exbindo menu de opções e recebendo opção
		exibirMenu()
		opcaoMenu = validarOpcaoMenuPrincipal(obterOpcaoMenuPrincipal())

		// Chamando funções
		chamarFuncaoMenuPrincipal(opcaoMenu, codigos, saldos, quantidadeContas)
	}

	// Menu principal
	funcao exibirMenu()
	{
		limpa()
		escreva("[ / ] Menu principal", "\n",
		"[ 1 ] Efetuar depósito", "\n",
		"[ 2 ] Efetuar saque", "\n",
		"[ 3 ] Consultar ativo bancário", "\n",
		"[ 4 ] Relatório de contas","\n",
		"[ 5 ] Finalizar o programa", "\n",
		"[ > ] ")
	}

	// Menu relatorio de contas
	funcao menuRelatorioDeContas()
	{
		limpa()
		escreva("[ / ] Menu relatório de contas", "\n",
		"[ 1 ] Buscar por código", "\n",
		"[ 2 ] Navegação", "\n",
		"[ 3 ] Visão geral", "\n",
		"[ 4 ] Voltar para o menu principal", "\n",
		"[ > ] ")
	}

	// Função principal relacionada ao menu principal
	funcao chamarFuncaoMenuPrincipal(inteiro opcaoMenuPrincipal, inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		enquanto (verdadeiro)
		{
			// Depositar
			se (opcaoMenuPrincipal == 1)
			{
				enquanto (verdadeiro)
				{
					limpa()
					inteiro codigo = validarCodigo(obterCodigo())
					
					/*
					 * Conferindo se o código já existe
					 */
					se (conferirCodigoExistente(codigo, codigos, quantidadeContas))
					{
						real valorDeposito = validarValorDeposito(obterValorDeposito())
						inteiro indexConta = encontrarIndex(codigo, codigos)

						// Confirmando
						se (confirmarDeposito(codigo, valorDeposito))
						{
							// Depositando
							depositar(saldos, valorDeposito, indexConta)
							
							// Exibindo resultado
							real saldoAntigo = saldos[indexConta] - valorDeposito
							real valorResultante = saldos[indexConta]
					
							saldoAntigo = Matematica.arredondar(saldoAntigo, 2)
							valorDeposito = Matematica.arredondar(valorDeposito, 2)
							valorResultante = Matematica.arredondar(valorResultante, 2)
							
							limpa()
							escreva("[ / ] Depósito concluído com sucesso", "\n",
							"[ $ ] R$ ", saldoAntigo, "\n",
							"[ + ] R$ ", valorDeposito, "\n",
							"[ = ] R$ ", valorResultante, "\n",
							"\n")
				
							mensagemContinuar()
	
							pare
						}
						senao
						{
							pare
						}
					}
					senao
					{
						mensagemCarregamento(2, "Conta não cadastrada")	
					}	
				}
			}

			// Saque
			senao se (opcaoMenuPrincipal == 2)
			{
				enquanto (verdadeiro)
				{
					limpa()
					inteiro codigo = validarCodigo(obterCodigo())

					/*
					 * Conferindo se o código já existe
					 */
					se (conferirCodigoExistente(codigo, codigos, quantidadeContas))
					{
						inteiro indexConta = encontrarIndex(codigo, codigos)
			
						real saldo = saldos[indexConta]
						real valorSaque = validarValorSaque(obterValorSaque(), saldo)

						// Confirmação
						se (confirmarSaque(codigo, valorSaque))
						{
							// Sacando
							sacar(saldos, valorSaque, indexConta)
				
							// Escrevendo resultado
							real saldoAntigo = saldos[indexConta] + valorSaque
							real valorResultante = saldos[indexConta]
					
							saldoAntigo = Matematica.arredondar(saldoAntigo, 2)
							valorSaque = Matematica.arredondar(valorSaque, 2)
							valorResultante = Matematica.arredondar(valorResultante, 2)
							
							limpa()
							escreva("[ / ] Saque concluído com sucesso", "\n",
							"[ $ ] R$ ", saldoAntigo, "\n",
							"[ - ] R$ ", valorSaque, "\n",
							"[ = ] R$ ", valorResultante, "\n",
							"\n")
				
							mensagemContinuar()
	
							pare	
						}
						senao
						{
							pare
						}
					}
					senao
					{
						mensagemCarregamento(2, "Conta não cadastrada")
					}
				}
			}

			// Consultar ativo bancário
			senao se (opcaoMenuPrincipal == 3)
			{
				// Consultando
				real ativoBancario = consultarAtivoBancario(saldos, quantidadeContas)
	
				// Exibindo resultado
				ativoBancario = Matematica.arredondar(ativoBancario, 2)

				// Exibindo valor das contas isoladamente
				limpa()
				para (inteiro h = 0; h < quantidadeContas; h++)
				{
					escreva("[ / ] ", h + 1, "ª conta", "\n",
					"[ # ] Código da conta | ", codigos[h], "\n",
					"[ $ ] Saldo | R$ ", Matematica.arredondar(saldos[h], 2), "\n",
					"\n")
				}
				
				escreva("[ / ] Ativo bancário", "\n",
				"[ $ ] R$ ", ativoBancario, "\n",
				"\n")
	
				mensagemContinuar()
			}

			// Relatório de contas
			senao se (opcaoMenuPrincipal == 4)
			{
				// Chamando função principal do relatorio de contas
				relatorioDeContas(codigos, saldos, quantidadeContas)
			}

			// Saindo
			senao se (opcaoMenuPrincipal == 5)
			{
				sair()
				pare
			}

			// Caso a opção não esteja no menu
			senao
			{
				limpa()

				mensagemCarregamento(2, "Opção inválida")
			}

			/*
			 * Obtendo nova opção
			 */
			exibirMenu()
			opcaoMenuPrincipal = validarOpcaoMenuPrincipal(obterOpcaoMenuPrincipal())
		}
	}

	// Função principal relacionada ao menu relatorio de contas
	funcao chamarFuncaoMenuRelatorioContas(inteiro opcaoMenuRelatorioDeContas, inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		enquanto (verdadeiro)
		{
			// Buscar por código
			se (opcaoMenuRelatorioDeContas == 1)
			{
				buscarComCodigoMenuRelatorioContas(codigos, saldos, quantidadeContas)
			}

			// Navegação
			senao se (opcaoMenuRelatorioDeContas == 2)
			{
				navegacaoMenuRelatorioContas(codigos, saldos, quantidadeContas)
			}

			// Visão geral
			senao se (opcaoMenuRelatorioDeContas == 3)
			{
				limpa()
				visaoGeralMenuRelatorioContas(codigos, saldos, quantidadeContas)

				mensagemContinuar()
			}
			
			// Voltar para o menu principal
			senao se (opcaoMenuRelatorioDeContas == 4)
			{
				pare
			}

			// Caso não seja um código válido
			senao
			{
				limpa()

				mensagemCarregamento(2, "Opção inválida")
			}
			
			/*
			 * Obtendo nova opção
			 */
			menuRelatorioDeContas()
			opcaoMenuRelatorioDeContas = validarOpcaoMenuRelatorioDeContas(obterOpcaoMenuRelatorioDeContas())
		}
	}

	// Funções Menu principal
	funcao depositar(real &saldos[], real valorDeposito, inteiro index)
	{
		saldos[index] += valorDeposito
	}

	funcao sacar(real &saldos[], real valorSaque, inteiro index)
	{
		saldos[index] -= valorSaque
	}

	funcao real consultarAtivoBancario(real &saldos[], inteiro &quantidadeContas)
	{
		real somaAtivoBancario = 0.0

		// Somando todos os saldos
		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			somaAtivoBancario += saldos[i]
		}

		retorne somaAtivoBancario
	}

	funcao relatorioDeContas(inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		inteiro opcaoMenuRelatorioDeContas = 0

		// Exibindo menu relatório de contas
		menuRelatorioDeContas()
		opcaoMenuRelatorioDeContas = validarOpcaoMenuRelatorioDeContas(obterOpcaoMenuRelatorioDeContas())

		// Chamando funções
		chamarFuncaoMenuRelatorioContas(opcaoMenuRelatorioDeContas, codigos, saldos, quantidadeContas)
	}

	funcao sair()
	{
		mensagemCarregamento(2, "Saindo")
	}

	// Funções Menu relatório contas
	funcao buscarComCodigoMenuRelatorioContas(inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		inteiro codigoParaBusca = 0
		inteiro index = 0

		inteiro codigo = 0
		real saldo = 0.0

		// Encontrando index e obtendo informações
		enquanto (verdadeiro)
		{
			limpa()
			codigoParaBusca = validarCodigo(obterCodigo())

			/*
			 * Conferindo se o código foi registrado
			 * Caso não esteja, exibe mensagem de erro e solicita o código novamente
			 */
			se (conferirCodigoExistente(codigoParaBusca, codigos, quantidadeContas))
			{
				pare
			}
			senao
			{
				limpa()
				mensagemCarregamento(2, "Conta não encontrada, tente novamente")
			}
		}

		/*
		 * Buscando index para obter as informações da conta
		 */
		index = encontrarIndex(codigoParaBusca, codigos)

		codigo = codigos[index]
		saldo = saldos[index]

		// Exibindo resultado
		saldo = Matematica.arredondar(saldo, 2)

		limpa()
		escreva("[ # ] Código | ", codigo, "\n",
		"[ $ ] R$ ", saldo, "\n",
		"\n")

		mensagemContinuar()
	}

	funcao navegacaoMenuRelatorioContas(inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		inteiro index = 0
		inteiro opcaoNavegacaoMenuRelatorioContas = 0

		enquanto (verdadeiro)
		{
			
			/*
			 * Exibindo informações das contas
			 * 
			 * Obs: Começa com zero para iniciar com a 1ª conta
			 */
			limpa()
			escreva("[ / ] ", index + 1,"ª conta", "\n",
			"[ # ] Código | ", codigos[index], "\n",
			"[ $ ] R$ ", Matematica.arredondar(saldos[index], 2), "\n",
			"\n",
			"[ 1 ] Avançar", "\n",
			"[ 2 ] Voltar", "\n",
			"[ 3 ] Ir para o menu relatório de contas", "\n",
			"[ > ] ")
			opcaoNavegacaoMenuRelatorioContas = validarOpcaoNavegacaoMenuRelatorioContas(obterOpcaoNavegacaoMenuRelatorioContas())

			// Avançar
			se (opcaoNavegacaoMenuRelatorioContas == 1)
			{
				/*
				 * Conferindo se existe conta na frente
				 */
				se ((index + 1) <= (quantidadeContas - 1))
				{
					index++
				}
			}

			// Voltar
			senao se (opcaoNavegacaoMenuRelatorioContas == 2)
			{
				/*
				 * Conferindo se existe conta atrás
				 */
				se ((index - 1) >= 0)
				{
					index--
				}
			}

			// Voltar para o menu relatório de contas
			senao se (opcaoNavegacaoMenuRelatorioContas == 3)
			{
				pare
			}

			// Valor inválido
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
			}
		}
	}

	funcao visaoGeralMenuRelatorioContas(inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		// Exibindo resultado
		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			escreva("[ / ] ", i + 1, "ª conta", "\n",
			"[ # ] Código | ", codigos[i], "\n",
			"[ $ ] Saldo | R$ ", Matematica.arredondar(saldos[i], 2), "\n",
			"\n")
		}
	}

	// Funções para criação de conta
	funcao registrarConta(inteiro &codigos[], real &saldos[], inteiro &quantidadeContas)
	{
		inteiro codigo = 0

		real saldo = 0.0

		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			enquanto (verdadeiro)
			{
				
				// Solicitando código
				limpa()
				escreva("[ / ] Criação de conta", "\n")
				codigo = validarCodigo(obterCodigo())

				// Conferindo se o código já foi criado
				se (conferirCodigoExistente(codigo, codigos, quantidadeContas))
				{
					mensagemCarregamento(2, "Código já registrado")	
				}
				senao
				{
					limpa()
					escreva("[ / ] Criação de conta", "\n")
					saldo = validarSaldo(obterSaldo())

					// Confirmação
					se (confirmarRegistrarConta(codigo, saldo, i))
					{
						codigos[i] = codigo
						saldos[i] = saldo
						pare
					}
				}
			}
		}
	}

	// Confirmações
	funcao logico confirmarDeposito(inteiro codigo, real valorDeposito)
	{
		cadeia confirmacao = ""

		logico confirmacaoDeposito = falso

		inteiro opcaoConfirmacaoInteiro = 0

		enquanto (verdadeiro)
		{
			limpa()
			escreva("[ # ] Código da conta | ", codigo, "\n",
			"[ $ ] Valor do depósito | R$ ", valorDeposito, "\n",
			"\n",
			"[ 1 ] Confirmar", "\n",
			"[ 2 ] Cancelar", "\n",
			"[ > ] ")
			leia(confirmacao)

			se (Tipos.cadeia_e_inteiro(confirmacao, 10))
			{
				opcaoConfirmacaoInteiro = Tipos.cadeia_para_inteiro(confirmacao, 10)
				
				se (opcaoConfirmacaoInteiro == 1)
				{
					confirmacaoDeposito = verdadeiro
					pare
				}
				senao se (opcaoConfirmacaoInteiro == 2)
				{
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente")
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente")
			}
		}

		retorne confirmacaoDeposito
	}

	funcao logico confirmarSaque(inteiro codigo, real valorSaque)
	{
		cadeia confirmacao = ""

		logico confirmacaoSaque = falso

		inteiro opcaoConfirmacaoInteiro = 0

		enquanto (verdadeiro)
		{
			limpa()
			escreva("[ # ] Código da conta | ", codigo, "\n",
			"[ $ ] Valor do saque | R$ ", valorSaque, "\n",
			"\n",
			"[ 1 ] Confirmar", "\n",
			"[ 2 ] Cancelar", "\n",
			"[ > ] ")
			leia(confirmacao)

			se (Tipos.cadeia_e_inteiro(confirmacao, 10))
			{
				opcaoConfirmacaoInteiro = Tipos.cadeia_para_inteiro(confirmacao, 10)
				
				se (opcaoConfirmacaoInteiro == 1)
				{
					confirmacaoSaque = verdadeiro
					pare
				}
				senao se (opcaoConfirmacaoInteiro == 2)
				{
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente")
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente")
			}
		}

		retorne confirmacaoSaque
	}

	funcao logico confirmarRegistrarConta(inteiro codigo, real saldo, inteiro numeroConta)
	{
		cadeia confirmacao = ""

		logico confirmacaoConta = falso

		inteiro opcaoConfirmacaoInteiro = 0

		enquanto (verdadeiro)
		{
			limpa()
			escreva("[ / ] ", numeroConta + 1, "ª conta", "\n",
			"[ # ] Código | ", codigo, "\n",
			"[ $ ] Saldo | R$ ", saldo, "\n",
			"\n",
			"[ 1 ] Confirmar", "\n",
			"[ 2 ] Cancelar", "\n",
			"[ > ] ")
			leia(confirmacao)

			se (Tipos.cadeia_e_inteiro(confirmacao, 10))
			{
				opcaoConfirmacaoInteiro = Tipos.cadeia_para_inteiro(confirmacao, 10)
				
				se (opcaoConfirmacaoInteiro == 1)
				{
					confirmacaoConta = verdadeiro
					pare
				}
				senao se (opcaoConfirmacaoInteiro == 2)
				{
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente")
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente")
			}
		}

		retorne confirmacaoConta
	}

	// Funcionalidades extras
	funcao inteiro encontrarIndex(inteiro codigo, inteiro &codigos[])
	{
		inteiro tamanhoVetor = 10
		inteiro index = 0

		para (inteiro i = 0; i < tamanhoVetor; i++)
		{
			se (codigos[i] == codigo)
			{
				index = i
				pare
			}
		}

		retorne index
	}

	funcao logico conferirCodigoExistente(inteiro codigo, inteiro &codigos[], inteiro &quantidadeContas)
	{
		logico validado = falso

		para (inteiro i = 0; i < quantidadeContas; i++)
		{
			se (codigos[i] == codigo)
			{
				validado = verdadeiro
				pare
			}
			senao
			{
				validado = falso
			}
		}

		retorne validado
	}

	// Obter valores
	funcao cadeia obterOpcaoNavegacaoMenuRelatorioContas()
	{
		cadeia opcaoNavegacaoMenuRelatorioContas

		leia(opcaoNavegacaoMenuRelatorioContas)

		retorne opcaoNavegacaoMenuRelatorioContas
	}

	funcao cadeia obterOpcaoMenuRelatorioDeContas()
	{
		cadeia opcaoMenuRelatorioDeContas

		leia(opcaoMenuRelatorioDeContas)

		retorne opcaoMenuRelatorioDeContas
	}

	funcao cadeia obterOpcaoMenuPrincipal()
	{
		cadeia opcaoMenuPrincipal

		leia(opcaoMenuPrincipal)

		retorne opcaoMenuPrincipal
	}

	funcao cadeia obterSaldo()
	{
		cadeia saldo = ""

		escreva("[ ? ] Informe o valor", "\n",
		"[ $ ] R$ ")
		leia(saldo)
		
		retorne saldo
	}

	funcao cadeia obterCodigo()
	{
		cadeia codigo = ""

		escreva("[ ? ] Informe o código da conta", "\n",
		"[ # ] ")
		leia(codigo)
		
		retorne codigo
	}

	funcao cadeia obterValorDeposito()
	{
		cadeia valorDepostio = ""

		limpa()
		escreva("[ / ] Depósito", "\n",
		"[ ? ] Informe o valor do depósito", "\n",
		"[ $ ] R$ ")
		leia(valorDepostio)
		
		retorne valorDepostio
	}

	funcao cadeia obterValorSaque()
	{
		cadeia valorSaque = ""

		limpa()
		escreva("[ / ] Saque", "\n",
		"[ ? ] Informe o valor do saque", "\n",
		"[ $ ] R$ ")
		leia(valorSaque)
		
		retorne valorSaque
	}

	// Validações
	funcao inteiro validarOpcaoNavegacaoMenuRelatorioContas(cadeia opcaoNavegacaoMenuRelatorioContas)
	{
		inteiro opcaoNavegacaoMenuRelatorioContasInteiro = 0

		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(opcaoNavegacaoMenuRelatorioContas, 10))
			{
				se (Tipos.cadeia_para_inteiro(opcaoNavegacaoMenuRelatorioContas, 10) >= 1 e Tipos.cadeia_para_inteiro(opcaoNavegacaoMenuRelatorioContas, 10) <= 3)
				{
					opcaoNavegacaoMenuRelatorioContasInteiro = Tipos.cadeia_para_inteiro(opcaoNavegacaoMenuRelatorioContas, 10)
					pare
				}
				senao
				{
					pare
				}
			}
			senao
			{
				pare
			}
		}

		retorne opcaoNavegacaoMenuRelatorioContasInteiro
	}

	funcao inteiro validarOpcaoMenuRelatorioDeContas(cadeia opcaoMenuRelatorioDeContas)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(opcaoMenuRelatorioDeContas, 10))
			{
				se (Tipos.cadeia_para_inteiro(opcaoMenuRelatorioDeContas, 10) >= 1 e Tipos.cadeia_para_inteiro(opcaoMenuRelatorioDeContas, 10) <= 4)
				{
					 pare
				}
				senao
				{
					mensagemCarregamento(2, "Opção inválida, tente novamente.")
					
					menuRelatorioDeContas()
					opcaoMenuRelatorioDeContas = obterOpcaoMenuRelatorioDeContas()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				
				menuRelatorioDeContas()
				opcaoMenuRelatorioDeContas = obterOpcaoMenuRelatorioDeContas()
			}
		}

		retorne Tipos.cadeia_para_inteiro(opcaoMenuRelatorioDeContas, 10)
	}

	funcao real validarSaldo(cadeia saldo)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(saldo, 10) ou Tipos.cadeia_e_real(saldo))
			{
				se (Tipos.cadeia_para_real(saldo) >= 0.0)
				{
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente.")
					
					saldo = obterSaldo()	
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				
				saldo = obterSaldo()
			}
		}

		retorne Tipos.cadeia_para_real(saldo)
	}

	funcao inteiro validarCodigo(cadeia codigo)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(codigo, 10))
			{
				se (Tipos.cadeia_para_inteiro(codigo, 10) > 0)
				{
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente.")
					codigo = obterCodigo()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				
				codigo = obterCodigo()
			}
		}

		retorne Tipos.cadeia_para_inteiro(codigo, 10)
	}

	funcao inteiro validarOpcaoMenuPrincipal(cadeia opcaoMenuPrincipal)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(opcaoMenuPrincipal, 10))
			{
				se (Tipos.cadeia_para_inteiro(opcaoMenuPrincipal, 10) >= 1 e Tipos.cadeia_para_inteiro(opcaoMenuPrincipal, 10) <= 5)
				{
					 pare
				}
				senao
				{
					mensagemCarregamento(2, "Opção inválida, tente novamente.")
					
					exibirMenu()
					opcaoMenuPrincipal = obterOpcaoMenuPrincipal()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				
				exibirMenu()
				opcaoMenuPrincipal = obterOpcaoMenuPrincipal()
			}
		}

		retorne Tipos.cadeia_para_inteiro(opcaoMenuPrincipal, 10)
	}

	funcao real validarValorDeposito(cadeia valorDeposito)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(valorDeposito, 10) ou Tipos.cadeia_e_real(valorDeposito))
			{
				se (Tipos.cadeia_para_real(valorDeposito) > 0.0)
				{
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor deve ser maior que R$ 0, tente novamente.")
					valorDeposito = obterValorDeposito()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				valorDeposito = obterValorDeposito()
			}
		}

		retorne Tipos.cadeia_para_real(valorDeposito)
	}

	funcao real validarValorSaque(cadeia valorSaque, real saldo)
	{
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(valorSaque, 10) ou Tipos.cadeia_e_real(valorSaque))
			{
				se (Tipos.cadeia_para_real(valorSaque) > 0.0)
				{
					/*
					 * Confere se a conta tem dinheiro suficiente para o saque
					 */
					se (saldo >= Tipos.cadeia_para_real(valorSaque))
					{
						pare
					}
					senao
					{
						mensagemCarregamento(2, "Valor de saque maior que saldo, tente novamente.")
						valorSaque = obterValorSaque()
					}
				}
				senao
				{
					mensagemCarregamento(2, "Valor deve ser maior que R$ 0, tente novamente.")
					valorSaque = obterValorSaque()
				}
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				valorSaque = obterValorSaque()
			}
		}

		retorne Tipos.cadeia_para_real(valorSaque)	
	}

	// Funções estéticas
	funcao mensagemCarregamento(inteiro ciclos, cadeia mensagem)
	{
		cadeia simboloCarregamento[4]
		
		simboloCarregamento[0] = "|"
		simboloCarregamento[1] = "\\"
		simboloCarregamento[2] = "-"
		simboloCarregamento[3] = "/"

		para (inteiro i = 1; i <= ciclos; i++)
		{
			para (inteiro j = 0; j <= 3; j++)
			{
				limpa()
				escreva("[ ", simboloCarregamento[j]," ] ", mensagem)
				
				Util.aguarde(100)			
			}
		}

		limpa()
	}

	funcao mensagemContinuar()
	{
		cadeia continuar = ""
		
		escreva("[ Enter ] Para continuar\n")
		
		leia(continuar)
	}
}
