/*
@Pedro Santana Abreu (https://linktr.ee/pedrosantanaabreu)
@Icev (https://somosicev.com)

PT-BR:
1. Faça um programa para controlar o estoque de mercadorias de uma
empresa. Inicialmente, o programa de- verá preencher dois vetores com
dez posições cada, onde o primeiro corresponde ao código do produto e
o segundo, ao total desse produto em estoque. logo após, o programa
deverá ler um conjunto indeterminado de dados contendo o código de
um cliente e o código do produto que ele deseja comprar, codigoClienteNaoFormatadojuntamente
com a quantidade. Código do cliente igual a zero indica fim do
programa. O programa deverá verificar:

• se o código do produto solicitado existe. se existir, tentar atender ao
pedido; caso contrário, exibir mensagem Código inexistente;

• cada pedido feito por um cliente só pode ser atendido integralmente.
Caso isso não seja possível, escrever a mensagem Não temos estoque
suficiente dessa mercadoria. Se puder atendê-lo, escrever a mensagem
Pedido atendido. Obrigado e volte sempre;

• efetuar a atualização do estoque somente se o pedido for atendido
integralmente;

• no final do programa, escrever os códigos dos produtos com seus
respectivos estoques já atualizados.
*/

programa
{
	inclua biblioteca Tipos
	inclua biblioteca Util

	funcao inicio()
	{
		// Área das variáveis
		inteiro quantidadeProdutos = 10
		inteiro codigos[10]
		inteiro estoques[10]
		
		// Criando produtos | Códigos e Estoques
		criarProdutos(codigos, estoques, quantidadeProdutos)

		// Realizando pedidos
		realizarPedidos(codigos, estoques)
	}

	funcao realizarPedidos(inteiro &codigos[], inteiro &estoques[])
	{
		// Área das variáveis 
		inteiro codigoProdutoFormatado = 0
		cadeia codigoProdutoNaoFormatado = ""

		inteiro codigoClienteFormato = 0
		cadeia codigoClienteNaoFormatado = ""

		cadeia quantidadeNaoFormatada = ""
		inteiro quantidadeFormatada = 0
		
		enquanto (verdadeiro)
		{
			// Validando código do cliente
			enquanto (verdadeiro)
			{
				// Exibindo menu para solicitar código do cliente
				limpa()
				escreva("[ / ] Cliente", "\n",
				"[ # ] Insira o código do cliente", "\n",
				"[ < ] 0 para sair", "\n",
				"[ > ] ")
				leia(codigoClienteNaoFormatado)
				
				// Validando código inserido
				se (validarCodigo(codigoClienteNaoFormatado))
				{
					codigoClienteFormato = Tipos.cadeia_para_inteiro(codigoClienteNaoFormatado, 10)
					
					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente.")
				}
			}
			
			se (codigoClienteFormato == 0)
			{
				pare
			}
			senao
			{
				// Obtendo código do produto
				enquanto (verdadeiro)
				{
					// Exibindo menu para solicitar código da conta
					limpa()
					escreva("[ / ] Cliente ", codigoClienteFormato, "\n",
					"[ # ] Insira o código do produto", "\n",
					"[ > ] ")
					leia(codigoProdutoNaoFormatado)
					
					// Coletando e validando código inserido
					se (validarCodigo(codigoProdutoNaoFormatado))
					{
						se (validarCodigoNoBancoDeDados(Tipos.cadeia_para_inteiro(codigoProdutoNaoFormatado, 10), codigos))
						{
							mensagemCarregamento(2, "Código não cadastrado, tente novamente.")	
						}
						senao
						{
							codigoProdutoFormatado = Tipos.cadeia_para_inteiro(codigoProdutoNaoFormatado, 10)
							
							pare	
						}
					}
					senao
					{
						mensagemCarregamento(2, "Valor inválido, tente novamente.")
					}
				}

				// Obtendo quantidade do produto
				enquanto (verdadeiro)
				{
					// Exibindo menu para solicitar quantidade do produto
					limpa()
					escreva("[ / ] Cliente ", codigoClienteFormato, "\n",
					"[ # ] Código ", codigoProdutoFormatado, "\n",
					"[ - ] Insira a quantidade do produto", "\n",
					"[ > ] ")
					leia(quantidadeNaoFormatada)
					
					// Validando código inserido
					se (validarCodigo(codigoClienteNaoFormatado))
					{
						quantidadeFormatada = Tipos.cadeia_para_inteiro(quantidadeNaoFormatada, 10)
						
						pare
					}
					senao
					{
						mensagemCarregamento(2, "Valor inválido, tente novamente.")
					}
				}
			}
		}
	}

	funcao criarProdutos(inteiro &codigos[], inteiro &estoques[], inteiro quantidadeProdutos)
	{
		// Área das variáveis 
		inteiro codigoFormatado = 0
		inteiro estoqueFormatado = 0

		cadeia codigoNaoFormatado = ""
		cadeia estoqueNaoFormatado = ""

		para (inteiro i = 0; i < quantidadeProdutos; i++)
		{

			// Validando o código inserido
			enquanto (verdadeiro)
			{
				// Exibindo menu para solicitar código da conta
				limpa()
				escreva("[ / ] ", i + 1, "ª conta", "\n",
				"[ # ] Código", "\n",
				"[ > ] ")
				leia(codigoNaoFormatado)
				
				// Coletando e validando código inserido
				se (validarCodigo(codigoNaoFormatado))
				{
					se (validarCodigoNoBancoDeDados(Tipos.cadeia_para_inteiro(codigoNaoFormatado, 10), codigos))
					{
						codigoFormatado = Tipos.cadeia_para_inteiro(codigoNaoFormatado, 10)

						pare
					}
					senao
					{
						mensagemCarregamento(2, "Código já cadastrado, tente novamente.")	
					}
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente.")
				}
				
			}

			enquanto (verdadeiro)
			{
				// Exibindo menu para solicitar a quantidade no estoque
				limpa()
				escreva("[ / ] ", i + 1, "ª conta", "\n",
				"[ @ ] Estoque", "\n",
				"[ > ] ")
				leia(estoqueNaoFormatado)

				// Coletando e validando estoque inserido
				se (validarEstoque(estoqueNaoFormatado))
				{
					estoqueFormatado = Tipos.cadeia_para_inteiro(estoqueNaoFormatado, 10)

					pare
				}
				senao
				{
					mensagemCarregamento(2, "Valor inválido, tente novamente.")
				}
			}

			// Adicionando valores nos vetores
			codigos[i] = codigoFormatado
			estoques[i] = estoqueFormatado
		}
	}

	// Validadores de valores
	funcao logico validarCodigo(cadeia codigo)
	{
		se (Tipos.cadeia_e_inteiro(codigo, 10))
		{
			retorne verdadeiro
		}
		senao
		{
			retorne falso
		}
	}

	funcao logico validarEstoque(cadeia estoque)
	{
		se (Tipos.cadeia_e_inteiro(estoque, 10))
		{
			retorne verdadeiro
		}
		senao
		{
			retorne falso
		}
	}

	funcao logico validarCodigoNoBancoDeDados(inteiro codigoInserido, inteiro codigos[])
	{
		para (inteiro i = 0; i < 10; i++)
		{
			se (codigoInserido == codigos[i])
			{
				retorne falso
			}
		}

		retorne verdadeiro
	}

	// Funções estéticas
	funcao mensagemCarregamento(inteiro ciclos, cadeia mensagem)
	{
		cadeia simboloCarregamento[4]
		
		simboloCarregamento[0] = "|"
		simboloCarregamento[1] = "\\"
		simboloCarregamento[2] = "-"
		simboloCarregamento[3] = "/"

		para (inteiro i = 1; i <= ciclos; i++)
		{
			para (inteiro j = 0; j <= 3; j++)
			{
				limpa()
				escreva("[ ", simboloCarregamento[j]," ] ", mensagem)
				
				Util.aguarde(100)			
			}
		}

		limpa()
	}

	funcao mensagemContinuar()
	{
		cadeia continuar = ""
		
		escreva("[ Enter ] Para continuar\n")
		
		leia(continuar)
	}
}
