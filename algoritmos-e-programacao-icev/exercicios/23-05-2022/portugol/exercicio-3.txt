/*
@Pedro Santana Abreu (https://linktr.ee/pedrosantanaabreu)
@Icev (https://somosicev.com)

PT-BR:
Escreva uma função que retorne o valor por extenso de um valor
informado como parâmetro e utilize-a em um programa que realize a
leitura do valor e exiba o valor por extenso.
*/

programa
{
	inclua biblioteca Matematica
	inclua biblioteca Texto
	inclua biblioteca Tipos
	inclua biblioteca Util
	
	funcao inicio()
	{
		inteiro numero = 0

		menu()
		numero = validarNumero(obterNumero())
		
		limpa()
		escreva("[ / ] ", numero, " em extenso é: \n",unificarNumeroMaisSufixo(numero), "\n")
		mensagemContinuar()

		enquanto (verdadeiro)
		{
			menuContinuar()
			inteiro opcaoMenu = validarOpcaoMenu(obterOpcaoMenu())

			se (opcaoMenu == 1)
			{
				inicio()
			}
			senao se (opcaoMenu == 2)
			{
				mensagemCarregamento(2, "Saindo")
				pare
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente")	
			}
		}
	}

	funcao inteiro validarOpcaoMenu(cadeia opcaoMenu)
	{
		inteiro opcaoMenuInteiro = 0
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(opcaoMenu, 10))
			{
				opcaoMenuInteiro = Tipos.cadeia_para_inteiro(opcaoMenu, 10)
				pare
			}
			senao
			{
				mensagemCarregamento(2, "Valor inválido, tente novamente.")
				opcaoMenu = obterOpcaoMenu()
			}
		}
		
		retorne opcaoMenuInteiro
	}

	funcao cadeia obterOpcaoMenu()
	{
		cadeia opcaoMenu
		leia(opcaoMenu)
		retorne opcaoMenu
	}

	funcao menuContinuar()
	{
		limpa()
		escreva("[ / ] Deseja continuar?\n",
		"[ 1 ] Para continuar\n",
		"[ 2 ] Para sair\n",
		"[ > ] ")
	}

	funcao menu()
	{
		limpa()
		escreva("[ / ] Informe o valor que será transformado em extenso\n",
		"[ ! ] Limite do Portugol Studio 999.999.999\n",
		"[ > ] ")
	}

	funcao inteiro validarNumero(cadeia numeroCadeia)
	{
		inteiro numeroInteiro = 0
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(numeroCadeia, 10))
			{
				numeroInteiro = Tipos.cadeia_para_inteiro(numeroCadeia, 10)
				pare
			}
			senao
			{
				mensagemCarregamento(2, "Número inválido, tente novamente.")
				menu()
				numeroCadeia = obterNumero()
			}
		}

		retorne numeroInteiro
	}

	funcao cadeia obterNumero()
	{
		cadeia numeroCadeia
		leia(numeroCadeia)
		retorne numeroCadeia
	}

	funcao cadeia unificarNumeroMaisSufixo(inteiro numero)
	{
		cadeia textoNumeroParaContarCaracter = Tipos.inteiro_para_cadeia(numero, 10)
		inteiro tamanhoNumero = Texto.numero_caracteres(textoNumeroParaContarCaracter)

		enquanto (tamanhoNumero % 3 != 0)
		{
			tamanhoNumero++
		}

		cadeia textoFinal = ""

		para (inteiro i = tamanhoNumero; i >= 3; i -= 3)
		{
			inteiro potenciaModulo = 1
			inteiro potenciaDivisao = 1

			para (inteiro j = 1; j <= i; j++)
			{
				potenciaModulo *= 10
			}
			
			para (inteiro k = 1; k <= i - 3; k++)
			{
				potenciaDivisao *= 10
			}

			inteiro centenaConverter = (numero % potenciaModulo) / potenciaDivisao

			se (centenaConverter != 0)
			{
				se (tamanhoNumero != i)
				{
					textoFinal += " e "
				}
	
				se (nao (centenaConverter == 0 e i == 3))
				{
					cadeia centenaConvertidaCadeia = centena(centenaConverter)
					textoFinal += centenaConvertidaCadeia
					textoFinal += sufixo(i, centenaConverter)
				}	
			}
			senao
			{
				se (i == tamanhoNumero)
				{
					cadeia centenaConvertidaCadeia = centena(centenaConverter)
					textoFinal += centenaConvertidaCadeia
					textoFinal += sufixo(i, centenaConverter)
				}
			}
		}

		retorne textoFinal
	}

	funcao cadeia sufixo(inteiro tamanhoNumero, inteiro centenaNumero)
	{

		/*
		 * Caso o tamanho do numero seja 3
		 * Então não devemos inserir sufixo, pois é o final da string
		 * Exemplo:
		 * 101
		 * 
		 * Tamanho 3
		 * Não existe sufixo para número de tamanho 3
		 */

		se (tamanhoNumero > 3)
		{
			se (centenaNumero == 1)
			{
				cadeia sufixoNumero[3]
				sufixoNumero[0] = " mil"
				sufixoNumero[1] = " milhão"

				retorne sufixoNumero[tamanhoNumero / 3 - 2]
			}
			senao
			{
				cadeia sufixoNumero[3]
				sufixoNumero[0] = " mil"
				sufixoNumero[1] = " milhões"

				retorne sufixoNumero[tamanhoNumero / 3 - 2]
			}
		}
		senao
		{
			retorne ""
		}
	}

	funcao cadeia unidade(inteiro numero)
	{	
		
		cadeia unidadeTexto[10]
		unidadeTexto[0] = "zero"
		unidadeTexto[1] = "um"
		unidadeTexto[2] = "dois"
		unidadeTexto[3] = "três"
		unidadeTexto[4] = "quatro"
		unidadeTexto[5] = "cinco"
		unidadeTexto[6] = "seis"
		unidadeTexto[7] = "sete"
		unidadeTexto[8] = "oito"
		unidadeTexto[9] = "nove"

		/*
		 * Caso a unidade seja 0 temos duas opções possiveis:
		 * 1. Se for apenas 0
		 * Então devemos retornar "zero"
		 * 
		 * 2. Se for 0 e o número for maior que 9
		 * Exemplo: 10
		 * Então o programa não deverá retorna nada
		 */

		se (numero <= 9)
		{
			retorne unidadeTexto[numero % 10]
		}
		senao
		{
			retorne ""
		}
	}

	funcao cadeia dezena(inteiro numero)
	{
		se (numero % 100 < 10)
		{
			retorne unidade(numero)
		}
		senao
		{
			se (numero % 100 < 20)
			{
				cadeia dezenaTexto[10]
	
				dezenaTexto[0] = "dez"
				dezenaTexto[1] = "onze"
				dezenaTexto[2] = "doze"
				dezenaTexto[3] = "treze"
				dezenaTexto[4] = "quatorze"
				dezenaTexto[5] = "quinze"
				dezenaTexto[6] = "dezesseis"
				dezenaTexto[7] = "dezessete"
				dezenaTexto[8] = "dezoito"
				dezenaTexto[9] = "dezenove"
	
				/*
				 * Exemplo:
				 * numero = 117
				 * 
				 * (numero % 100) - (10)
				 * (17) - (10)
				 * 7 = dezessete
				 */
	
				retorne dezenaTexto[numero % 100 - 10]
			}
			senao
			{
				cadeia dezenaTexto[8]
				cadeia dezenaTextoFinal = ""
	
				dezenaTexto[0] = "vinte"
				dezenaTexto[1] = "trinta"
				dezenaTexto[2] = "quarenta"
				dezenaTexto[3] = "cinquenta"
				dezenaTexto[4] = "sessenta"
				dezenaTexto[5] = "sessenta"
				dezenaTexto[6] = "oitenta"
				dezenaTexto[7] = "noventa"
	
				/*
				 * Tabela para facilitar o entendimento:
				 * 
				 * 0 = 20
				 * 1 = 30
				 * 2 = 40
				 * 3 = 50
				 * 4 = 60
				 * 5 = 70
				 * 6 = 80
				 * 7 = 90
				 * 
				 * Formatando o numero temos:
				 * 
				 * 0 = 2
				 * 1 = 3
				 * 2 = 4
				 * 3 = 5
				 * 4 = 6
				 * 5 = 7
				 * 6 = 8
				 * 7 = 9
				 * 
				 * Nota-se através da tabela que existe uma diferença de +2 dos valores da tabela para os valores das dezenas
				 * Então precisamos que atraves de um calculo matematica essa diferença seja satisfeita
				 * 
				 * Logo temos:
				 * Exemplo com numero 131:
				 * Primeiramente devemos remover a centena
				 * numero % 100 = 31
				 * 
				 * Logo em seguida removeremos a diferença
				 * 30 - 20 = 11
				 * 
				 * Em seguida, vamos remover o resto
				 * numero % 100 % 10 = 1
				 * 11 - 1 = 10
				 * 
				 * E por fim dividimos por 10 para obtermos o valor para puxar do vetor
				 * 10 / 10 = 1
				 * 1 = 30
				 */
	
				dezenaTextoFinal += dezenaTexto[((numero % 100 - 20) - (numero % 100 % 10)) / 10]
	
				/*
				 * Aqui verificamos se o numero termina com um número diferente de 0
				 * 1. Caso termine em 0, retornara apenas o nome da dezena
				 * 
				 * 2. Caso termine em um número diferente de 0, seguiremos os seguintes passos:
				 * Exemplo com o numero 21:
				 * Primeiro passo:
				 * Será adicionado o " e "
				 * Logo:
				 * vinte e ...
				 * 
				 * Logo depois iremos adicionar o valor que a função unidade retornara
				 * unidade(21) = um
				 * Logo:
				 * vinte e um
				 * 
				 * Terminando o programa
				 */
	
				se (numero % 100 % 10 != 0)
				{
					dezenaTextoFinal += " e "
					dezenaTextoFinal += unidade(numero % 100 % 10)
				}
	
				retorne dezenaTextoFinal
			}
		}
	}

	funcao cadeia centena(inteiro numero)
	{
		se (numero < 10)
		{
			retorne unidade(numero)
		}
		senao se (numero < 100)
		{
			retorne dezena(numero)
		}
		senao
		{
			cadeia centenaTexto[9]
			centenaTexto[0] = "cem"
			centenaTexto[1] = "duzentos"
			centenaTexto[2] = "trezentos"
			centenaTexto[3] = "quatrocentos"
			centenaTexto[4] = "quinhentos"
			centenaTexto[5] = "seiscentos"
			centenaTexto[6] = "setecentos"
			centenaTexto[7] = "oitocentos"
			centenaTexto[8] = "novicentos"

			se (numero % 100 != 0)
			{
				cadeia centenaTextoFinal = ""

				/*
				 * Caso a centena seja 100 devemos alterar o valor que antes era cem para cento
				 */

				se (numero / 100 == 1)
				{
					centenaTexto[0] = "cento"
				}

				/*
				 * Para acessar o valor da string dentro do vetor, usa-se o calculo
				 * Divisão inteira por 100 - 1
				 * Ou seja:
				 * Exemplo:
				 * inteiro numero = 211
				 * 
				 * Divisão inteira = numero / 100 = 2
				 * 2 - 1
				 * 1
				 * 
				 * 1 = duzentos
				 */

				centenaTextoFinal += centenaTexto[numero / 100 - 1]
				centenaTextoFinal += " e "
				centenaTextoFinal += dezena(numero)

				retorne centenaTextoFinal
			}
			senao
			{
				se (numero == 0)
				{
					retorne ""
				}
				senao
				{
					retorne centenaTexto[numero / 100 - 1]
				}
			}
		}
	}
	
	// Funções estéticas
	funcao mensagemCarregamento(inteiro ciclos, cadeia mensagem)
	{
		cadeia simboloCarregamento[4]
		simboloCarregamento[0] = "|"
		simboloCarregamento[1] = "\\"
		simboloCarregamento[2] = "-"
		simboloCarregamento[3] = "/"

		para (inteiro i = 1; i <= ciclos; i++)
		{
			para (inteiro j = 0; j <= 3; j++)
			{
				limpa()
				escreva("[ ", simboloCarregamento[j]," ] ", mensagem)
				Util.aguarde(100)			
			}
		}

		limpa()
	}

	funcao mensagemContinuar()
	{
		cadeia continuar = ""
		escreva("\n",
		"[ Enter ] Para continuar\n")
		leia(continuar)
	}
}
