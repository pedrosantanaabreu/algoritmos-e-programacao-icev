/*
@Pedro Santana Abreu (https://linktr.ee/pedrosantanaabreu)
@Icev (https://somosicev.com)

PT-BR:
Escreva uma função que retorne o valor por extenso de um valor
informado como parâmetro e utilize-a em um programa que realize a
leitura do valor e exiba o valor por extenso.
*/

programa
{
	inclua biblioteca Texto
	inclua biblioteca Tipos
	inclua biblioteca Util
	
	funcao inicio()
	{
		inteiro numero

		//escreva("Programa ainda não terminado, leitura de números até 999")
		//mensagemContinuar()

		//menu()
		//numero = validarNumero(obterNumero())
		escreva(dezena(120))
		//limpa()
		//escreva("[ / ] ", numero, " em extenso é: ",formarCentenaCadeia(numero))
		
		/*
		 	print((112500 % 1000000))
			print(112500 % 1000000 / 1000)
			print(112500 % 1000 / 1)
		 */
	}

	funcao menu()
	{
		limpa()
		escreva("[ / ] Informe o valor que será transformado em extenso\n[ > ] ")
	}

	funcao inteiro validarNumero(cadeia numeroCadeia)
	{
		inteiro numeroInteiro = 0
		enquanto (verdadeiro)
		{
			se (Tipos.cadeia_e_inteiro(numeroCadeia, 10))
			{
				numeroInteiro = Tipos.cadeia_para_inteiro(numeroCadeia, 10)
				pare
			}
			senao
			{
				mensagemCarregamento(2, "Número inválido, tente novamente.")
				menu()
				numeroCadeia = obterNumero()
			}
		}

		retorne numeroInteiro
	}

	funcao cadeia obterNumero()
	{
		cadeia numeroCadeia
		leia(numeroCadeia)
		retorne numeroCadeia
	}

	funcao cadeia formarCentenaCadeia(inteiro centenaInteiro)
	{
		cadeia resutado = ""

		cadeia tamanhoCentenaCadeia = Tipos.inteiro_para_cadeia(centenaInteiro, 10)
		inteiro tamanhoCentenaInteiro = Texto.numero_caracteres(tamanhoCentenaCadeia)

		cadeia centenaCadeia = ""
		cadeia dezenaCadeia = ""
		cadeia unidadeCadeia = ""

		se (tamanhoCentenaInteiro == 1)
		{
			unidadeCadeia = unidade(centenaInteiro % 100)
			resutado += unidadeCadeia
		}
		senao se (tamanhoCentenaInteiro == 2)
		{
			se (centenaInteiro % 100 >= 20)
			{
				se ((centenaInteiro % 100 % 10) != 0)
				{
					dezenaCadeia = dezena(centenaInteiro % 100)
					resutado += dezenaCadeia

					resutado += " e "

					unidadeCadeia = unidade(centenaInteiro % 100 % 10)
					resutado += unidadeCadeia
				}
				senao
				{
					dezenaCadeia = dezena(centenaInteiro % 100)
					resutado += dezenaCadeia
				}
			}
			senao
			{
				dezenaCadeia = dezena(centenaInteiro % 100)
				resutado += dezenaCadeia
			}
		}
		senao
		{
			se (centenaInteiro % 100 == 0)
			{
				centenaCadeia = centena(centenaInteiro, falso)
				resutado += centenaCadeia
			}
			senao
			{
				se (centenaInteiro % 100 > 9)
				{
					centenaCadeia = centena(centenaInteiro, verdadeiro)
					resutado += centenaCadeia
					resutado += " e "

					se (centenaInteiro % 100 >= 20)
					{
						se ((centenaInteiro % 100 % 10) != 0)
						{
							dezenaCadeia = dezena(centenaInteiro % 100)
							resutado += dezenaCadeia
		
							resutado += " e "
		
							unidadeCadeia = unidade(centenaInteiro % 100 % 10)
							resutado += unidadeCadeia
						}
						senao
						{
							dezenaCadeia = dezena(centenaInteiro % 100)
							resutado += dezenaCadeia
						}
					}
					senao
					{
						dezenaCadeia = dezena(centenaInteiro % 100)
						resutado += dezenaCadeia
					}
				}
				senao
				{
					centenaCadeia = centena(centenaInteiro, verdadeiro)
					resutado += centenaCadeia
	
					resutado += " e "
	
					unidadeCadeia = unidade(centenaInteiro % 100 % 10)
					resutado += unidadeCadeia
				}
			}
		}

		retorne resutado
	}

	funcao cadeia unidade(inteiro numero)
	{	
		
		cadeia unidadeTexto[10]
		unidadeTexto[0] = "zero"
		unidadeTexto[1] = "um"
		unidadeTexto[2] = "dois"
		unidadeTexto[3] = "três"
		unidadeTexto[4] = "quatro"
		unidadeTexto[5] = "cinco"
		unidadeTexto[6] = "seis"
		unidadeTexto[7] = "sete"
		unidadeTexto[8] = "oito"
		unidadeTexto[9] = "nove"

		/*
		 * Caso a unidade seja 0 temos duas opções possiveis:
		 * 1. Se for apenas 0
		 * Então devemos retornar "zero"
		 * 
		 * 2. Se for 0 e o número for maior que 9
		 * Exemplo: 10
		 * Então o programa não deverá retorna nada
		 */

		se (nao (numero % 10 == 0 e numero > 9))
		{
			retorne unidadeTexto[numero % 10]
		}
		senao
		{
			retorne ""
		}
	}

	funcao cadeia dezena(inteiro numero)
	{
		se (numero % 100 < 20)
		{
			cadeia dezenaTexto[10]

			dezenaTexto[0] = "dez"
			dezenaTexto[1] = "onze"
			dezenaTexto[2] = "doze"
			dezenaTexto[3] = "treze"
			dezenaTexto[4] = "quatorze"
			dezenaTexto[5] = "quinze"
			dezenaTexto[6] = "dezesseis"
			dezenaTexto[7] = "dezessete"
			dezenaTexto[8] = "dezoito"
			dezenaTexto[9] = "dezenove"

			/*
			 * Exemplo:
			 * numero = 117
			 * 
			 * (numero % 100) - (10)
			 * (17) - (10)
			 * 7 = dezessete
			 */

			retorne dezenaTexto[numero % 100 - 10]
		}
		senao
		{
			cadeia dezenaTexto[8]
			cadeia dezenaTextoFinal = ""

			dezenaTexto[0] = "vinte"
			dezenaTexto[1] = "trinta"
			dezenaTexto[2] = "quarenta"
			dezenaTexto[3] = "cinquenta"
			dezenaTexto[4] = "sessenta"
			dezenaTexto[5] = "sessenta"
			dezenaTexto[6] = "oitenta"
			dezenaTexto[7] = "noventa"

			/*
			 * Tabela para facilitar o entendimento:
			 * 
			 * 0 = 20
			 * 1 = 30
			 * 2 = 40
			 * 3 = 50
			 * 4 = 60
			 * 5 = 70
			 * 6 = 80
			 * 7 = 90
			 * 
			 * Formatando o numero temos:
			 * 
			 * 0 = 2
			 * 1 = 3
			 * 2 = 4
			 * 3 = 5
			 * 4 = 6
			 * 5 = 7
			 * 6 = 8
			 * 7 = 9
			 * 
			 * Nota-se através da tabela que existe uma diferença de +2 dos valores da tabela para os valores das dezenas
			 * Então precisamos que atraves de um calculo matematica essa diferença seja satisfeita
			 * 
			 * Logo temos:
			 * Exemplo com numero 131:
			 * Primeiramente devemos remover a centena
			 * numero % 100 = 31
			 * 
			 * Logo em seguida removeremos a diferença
			 * 30 - 20 = 11
			 * 
			 * Em seguida, vamos remover o resto
			 * numero % 100 % 10 = 1
			 * 11 - 1 = 10
			 * 
			 * E por fim dividimos por 10 para obtermos o valor para puxar do vetor
			 * 10 / 10 = 1
			 * 1 = 30
			 */

			dezenaTextoFinal += dezenaTexto[((numero % 100 - 20) - (numero % 100 % 10)) / 10]

			/*
			 * Aqui verificamos se o numero termina com um número diferente de 0
			 * 1. Caso termine em 0, retornara apenas o nome da dezena
			 * 
			 * 2. Caso termine em um número diferente de 0, seguiremos os seguintes passos:
			 * Exemplo com o numero 21:
			 * Primeiro passo:
			 * Será adicionado o " e "
			 * Logo:
			 * vinte e ...
			 * 
			 * Logo depois iremos adicionar o valor que a função unidade retornara
			 * unidade(21) = um
			 * Logo:
			 * vinte e um
			 * 
			 * Terminando o programa
			 */

			se (numero % 100 % 10 != 0)
			{
				dezenaTextoFinal += " e "
				dezenaTextoFinal += unidade(numero % 100 % 10)
			}

			retorne dezenaTextoFinal
		}
	}

	funcao cadeia centena(inteiro numero, logico temDezena)
	{
		cadeia centenaExtenso = ""
		numero = numero % 100

		se (numero == 1)
		{
			se (temDezena)
			{
				centenaExtenso = "cento"
			}
			senao
			{
				centenaExtenso = "cem"
			}
		}
		senao se(numero == 2)
		{
			centenaExtenso = "duzentos"
		}
		senao se (numero == 3)
		{
			centenaExtenso = "trezentos"
		}
		senao se (numero == 4)
		{
			centenaExtenso = "quatrocentos"
		}
		senao se (numero == 5)
		{
			centenaExtenso = "quinhentos"
		}
		senao se (numero == 6)
		{
			centenaExtenso = "seiscentos"
		}
		senao se (numero == 7)
		{
			centenaExtenso = "setecentos"
		}
		senao se (numero == 8)
		{
			centenaExtenso = "oitocentos"
		}
		senao se (numero == 9)
		{
			centenaExtenso = "novicentos"
		}
		senao
		{
			centenaExtenso = ""
		}

		retorne centenaExtenso
	}
	
	// Funções estéticas
	funcao mensagemCarregamento(inteiro ciclos, cadeia mensagem)
	{
		cadeia simboloCarregamento[4]
		simboloCarregamento[0] = "|"
		simboloCarregamento[1] = "\\"
		simboloCarregamento[2] = "-"
		simboloCarregamento[3] = "/"

		para (inteiro i = 1; i <= ciclos; i++)
		{
			para (inteiro j = 0; j <= 3; j++)
			{
				limpa()
				escreva("[ ", simboloCarregamento[j]," ] ", mensagem)
				Util.aguarde(100)			
			}
		}

		limpa()
	}

	funcao mensagemContinuar()
	{
		cadeia continuar = ""
		escreva("\n",
		"[ Enter ] Para continuar\n")
		leia(continuar)
	}
}
